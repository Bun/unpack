#!/usr/bin/env python3
# coding: utf-8
# BSD License (cf. COPYING)

from __future__ import print_function
from optparse import OptionParser

from zipfile import ZipFile
from subprocess import Popen, check_call
from tarfile import open as open_tar
from tempfile import mkdtemp

from os import listdir, rename, rmdir
from os.path import join, isdir, exists, basename

print_verbose = print_info = lambda fmt, *args: print(fmt % args)


def unzip(archive, archive_name, path, verbose):
    zf = ZipFile(archive, 'r')

    for fname in zf.infolist():
        print_verbose('Unzipping %s', fname.filename)
        zf.extract(fname, path)


def untar(archive, archive_name, path, verbose):
    tf = open_tar(archive, 'r')
    tf.extractall(path)


tar_ext_args = {
    'tgz': '--gzip',
    'gz': '--gzip',
    'tbz': '--bzip2',
    'bz2': '--bzip2',
    'lzma': '--lzma',
    'xz': '--xz',
}


def untar_cl(archive, archive_name, path, verbose):
    """ Use system tar to unpack the archive
    Could potentially break with files starting with a - """
    flags = 'v' if verbose else ''
    ext = archive.rsplit('.', 1)[-1].lower()

    args = ['tar',  '-x' + flags + 'f', archive]

    if ext in tar_ext_args:
        args.append(tar_ext_args[ext])

    check_call(args + ['-C', path])


def un7zip(archive, archive_name, path, verbose):
    # verbose/silent not supported
    check_call(('7z', 'x', '-o' + path, '-bd', '--', archive))


def unlzop(archive, archive_name, path, verbose):
    check_call(['lzop', '-d', '-p' + path, '--', archive])


def unpacker_dumb(command):
    def unpack(archive, archive_name, path, verbose):
        """ Stupid tool; does not let you specify the output file """

        temp_file = join(path, archive_name)

        writer = open(temp_file, 'xb')
        p = Popen([command, '--keep', '--decompress', '--stdout',
                   '--', archive], stdout=writer)
        p.wait()

    return unpack


formats = (
    ('.zip', unzip),
    ('.jar', unzip),

    ('.7z', un7zip),
    ('.rar', un7zip),
    ('.cab', un7zip),

    ('.lzo', unlzop),

    ('.gz', unpacker_dumb('gzip')),
    ('.bz2', unpacker_dumb('bzip2')),
    ('.lzma', unpacker_dumb('lmza')),
    ('.xz', unpacker_dumb('xz')),
)

if False:
    # Python untar
    formats = formats + (
        ('.tar', untar),
        ('.tgz', untar),
        ('.tar.gz', untar),
        ('.tar.bz2', untar),
    )
else:
    # System untar
    formats = formats + (
        ('.tar', untar_cl),
        ('.tgz', untar_cl),
        ('.tar.gz', untar_cl),
        ('.tar.bz2', untar_cl),
        ('.tar.lzma', untar_cl),
        ('.tar.xz', untar_cl),
    )


def format_detect(filename):
    """ Determine the unpack function by checking the longest matching
    extension """
    scan = filename.lower()
    match = None
    result = (None, False)

    for ext, unpacker in formats:
        if scan.endswith(ext) and (match is None or len(ext) > len(match)):
            archive_name = basename(filename)[:-len(ext)]
            match = ext
            result = (archive_name, unpacker)

    return result


def unpack(filename, options):
    path = options.directory or '.'

    # Determine archive type
    archive_name, unpacker = format_detect(filename)
    assert unpacker, 'Unsupported file format'

    # Unpack that stuff
    temporary_path = mkdtemp(prefix='.unpack', dir=path)
    print_verbose('Temporary path: %s', temporary_path)

    unpacker(filename, archive_name, temporary_path, options.verbose)

    # Figure out directory name
    archive_files = listdir(temporary_path)
    source = None
    target = None
    unlink_temp = True

    if len(archive_files) == 1:
        source = join(temporary_path, archive_files[0])
        target = join(path, archive_files[0])

        if not isdir(source) and not options.force_directory:
            # Archive is a single file
            print_verbose('Archive contains a single file')

        elif options.basename is not None:
            # Archive has a single top directory
            target = join(path, options.basename)
            print_verbose('Archive contains a single directory;'
                          ' using basename')

        else:
            print_verbose('Archive contains a single directory')

    else:
        # Archive has multiple files, but no common parent directory
        print_verbose('Archive has no common parent directory directory')
        source = temporary_path
        target = join(path, options.basename or archive_name)
        unlink_temp = False

    if exists(target):
        # TODO: option to clean up temporary_path
        print_info('Target %s already exists; using %s', target, source)
        target = source

    else:
        rename(source, target)

        if unlink_temp:
            rmdir(temporary_path)

    print_info('Unpacked to %s', target)


if __name__ == '__main__':
    parser = OptionParser()

    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
                      default=False, help='verbose output')

    parser.add_option('-x', '--force-directory', dest='force_directory',
                      action='store_true', default=False, help='always extract'
                      ' files to a directory, even for single file archives')

    parser.add_option('-p', '--path', metavar='DIRECTORY', dest='directory',
                      default=None, help='unpack in directory (default: .)')

    parser.add_option('-d', '--directory', metavar='DIRECTORY',
                      dest='basename', default=None,
                      help='override archive base path')

    options, args = parser.parse_args()

    if not args:
        parser.print_help()
        exit()

    if not options.verbose:
        print_verbose = lambda fmt, *args: None

    for filename in args:
        unpack(filename, options)
